!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class o{constructor(e,t){console.log("constructing:"+e+t),this.DBname=e,this.storeName=t,console.log("dao constructed"),console.log(this)}connect(e,t){let n=this;console.log(n);let o=indexedDB.open(n.DBname,1);o.onerror=function(e){console.log(e)},o.onsuccess=function(){let t=o.result;console.log("DAO"+typeof t),e(t,n)},o.onupgradeneeded=t}create(){}read(){}update(){}delete(){}}!function(){document.getElementById("b1").addEventListener("click",function(){let e=document.getElementById("centerPart");if(document.getElementById("fieldProfile"))return void(e.innerHTML="");let t=document.createElement("div");t.id="fieldProfile",e.innerHTML="",e.appendChild(t);let o=document.createElement("p");o.textContent="Имя  "+n.data.name,t.appendChild(o);let r=document.createElement("p");r.textContent="Пол  "+n.data.gender,t.appendChild(r);let a=document.createElement("p");a.textContent="Дата рождения  "+n.data.dateOfBirth,t.appendChild(a);let l=document.createElement("p");l.textContent="Вес  "+n.data.height,t.appendChild(l);let c=document.createElement("p");c.textContent="Рост  "+n.data.weght,t.appendChild(c);let i=document.createElement("p");i.textContent="Объем груди  "+n.data.waist,t.appendChild(i);let d=document.createElement("p");d.textContent="Объем талии  "+n.data.hipsize,t.appendChild(d);let s=document.createElement("p");s.textContent="Объем бедер  "+n.data.breastSize,t.appendChild(s);let u=document.createElement("p");u.textContent="Суточная норма   "+n.data.calories,t.appendChild(u)});document.getElementById("currentDate");let e=new Date,t=new Array(7);t[0]="Воскресенье",t[1]="Понедельник",t[2]="Вторник",t[3]="Среда",t[4]="Четверг",t[5]="Пятница",t[6]="Суббота",document.write("Сегодня "+t[e.getDay()]);let n=new class{constructor(){this.data={key:1,name:"",gender:"",dateOfBirth:"",height:"",weght:"",waist:"",hipsize:"",breastSize:"",calories:""},this.DBconfig={key:1,profileDBName:"profileDB",profileStoreName:"profileStore"},this.profileDAO=new o(this.DBconfig.profileDBName,this.DBconfig.profileStoreName),this.readProfile()}createProfile(){}readProfile(){let e=this.data,t=this.profileDAO;t.connect(function(n){console.log(t.storeName);let o=n.transaction([t.storeName],"readonly");o.oncomplete=function(e){console.log("readProfile transaction complete")},o.onerror=function(e){console.log("readProfile transaction error")};let r=o.objectStore(t.storeName).get(1);r.onsuccess=function(t){console.log("readProfile onsuccess");let n=r.result;e=n,console.log(n)}},function(n){n.currentTarget.result.createObjectStore(t.storeName,{keyPath:"key"});let o=this.transaction.objectStore(t.storeName);e.key=1,e.name="Veronika",e.gender="женский",e.dateOfBirth="29.04.1981",e.height="75 кг",e.weght="165 см",e.waist="80 см",e.hipsize="75 см",e.breastSize="100 см",e.calories="1100 ккал",o.add(e).onsuccess=function(e){console.log("dadata fill ok")}})}updateProfile(){}deleteProfile(){}};new class{constructor(e){this.data={journalRecords:[],profileId:1,lastUpdateData:{}}}}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY2xhc3MvREFPLmpzIiwid2VicGFjazovLy8uL2ZkMi1wcm9qZWN0LmpzIiwid2VicGFjazovLy8uL2NsYXNzL1Byb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vY2xhc3MvSm91cm5hbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiREFPIiwiW29iamVjdCBPYmplY3RdIiwiREJuYW1lIiwic3RvcmVOYW1lIiwiY29uc29sZSIsImxvZyIsInRoaXMiLCJmIiwib251cGdyYWRlbmVlZGVkIiwic2VsZiIsInJlcXVlc3QiLCJpbmRleGVkREIiLCJvcGVuIiwib25lcnJvciIsImVyciIsIm9uc3VjY2VzcyIsImRic2Vzc2lvbiIsInJlc3VsdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZmllbGRQcm9maWxlTmV3IiwiaW5uZXJIVE1MIiwiZmllbGRQcm9maWxlIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYXBwZW5kQ2hpbGQiLCJwMVByb2ZpbGUiLCJ0ZXh0Q29udGVudCIsIm15UHJvZmlsZSIsImRhdGEiLCJwMlByb2ZpbGUiLCJnZW5kZXIiLCJwM1Byb2ZpbGUiLCJkYXRlT2ZCaXJ0aCIsInA0UHJvZmlsZSIsImhlaWdodCIsInA1UHJvZmlsZSIsIndlZ2h0IiwicDZQcm9maWxlIiwid2Fpc3QiLCJwN1Byb2ZpbGUiLCJoaXBzaXplIiwicDhQcm9maWxlIiwiYnJlYXN0U2l6ZSIsInA5UHJvZmlsZSIsImNhbG9yaWVzIiwibXlUaW1lIiwiRGF0ZSIsIndlZWtkYXkiLCJBcnJheSIsIndyaXRlIiwiZ2V0RGF5Iiwia2V5IiwiREJjb25maWciLCJwcm9maWxlREJOYW1lIiwicHJvZmlsZVN0b3JlTmFtZSIsInByb2ZpbGVEQU8iLCJyZWFkUHJvZmlsZSIsImRhZGF0YSIsImNvbm5lY3QiLCJ0cmFuc2FjdGlvbiIsIm9uY29tcGxldGUiLCJldmVudCIsIm9iamVjdFN0b3JlUmVxdWVzdCIsIm9iamVjdFN0b3JlIiwicmVzdWx0X2RhdGEiLCJlIiwiY3VycmVudFRhcmdldCIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImFkZCIsInBhcmFtZXRyUHJvZmlsZSIsImpvdXJuYWxSZWNvcmRzIiwicHJvZmlsZUlkIiwibGFzdFVwZGF0ZURhdGEiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0Es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QyxVQUFBLFNBQUFnRCxHQUlBM0QsUUFBQUMsSUFBQSxxQkFZQUosaUJBS0FBLG1CRHJGQSxVRW5DQUEsWUFBQXVFLEdBRUFsRSxLQUFBd0IsTUFDQTJDLGtCQUNBQyxVQUFBLEVBQ0FDLHFCRk5BIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJgdXNlIHN0cmljdGA7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgREFPIHtcclxuICAgIGNvbnN0cnVjdG9yIChEQm5hbWUsIHN0b3JlTmFtZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29uc3RydWN0aW5nOlwiK0RCbmFtZSArc3RvcmVOYW1lIClcclxuICAgICAgICB0aGlzLkRCbmFtZSA9IERCbmFtZTtcclxuICAgICAgICB0aGlzLnN0b3JlTmFtZSA9IHN0b3JlTmFtZTtcclxuICAgICAgICBjb25zb2xlLmxvZyAoXCJkYW8gY29uc3RydWN0ZWRcIilcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgY29ubmVjdCAoZixvbnVwZ3JhZGVuZWVkZWQpIHtcclxuICAgICAgICBsZXQgc2VsZj10aGlzO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGYpXHJcbiAgICAgICAgbGV0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihzZWxmLkRCbmFtZSwgMSk7IC8vdmVyIDFcclxuICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGRic2Vzc2lvbiA9IHJlcXVlc3QucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coYERBT2AgKyB0eXBlb2YgZGJzZXNzaW9uKTtcclxuICAgICAgICAgICAgZihkYnNlc3Npb24sc2VsZik7XHJcblxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gb251cGdyYWRlbmVlZGVkO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlICgpIHt9XHJcbiAgICByZWFkICgpIHt9XHJcbiAgICB1cGRhdGUgKCkge31cclxuICAgIGRlbGV0ZSAoKSB7fVxyXG59IiwiaW1wb3J0IFByb2ZpbGUgZnJvbSBcIi4vY2xhc3MvUHJvZmlsZVwiO1xyXG5pbXBvcnQgSm91cm5hbCBmcm9tIFwiLi9jbGFzcy9Kb3VybmFsXCI7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIGB1c2Ugc3RyaWN0YDtcclxuXHJcbi8v0LLQtdGI0LDQtdC8INC+0LHRgNCw0LHQvtGC0YfQuNC60Lgg0YHQvtCx0YvRgtC40Lkg0L3QsCDQutC90L7Qv9C60LhcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImIxXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkcmF3UHJvZmlsZSk7XHJcblxyXG5cclxuXHJcbiAgICAvKmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYjJcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImIzXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCApO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiNFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYjVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImI2XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCApOyovXHJcblxyXG5cclxuXHJcbiBsZXQgbXlEYXRlPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50RGF0ZScpO1xyXG4gbGV0IG15VGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBsZXQgd2Vla2RheT1uZXcgQXJyYXkoNyk7XHJcbiAgICB3ZWVrZGF5WzBdPVwi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiO1xyXG4gICAgd2Vla2RheVsxXT1cItCf0L7QvdC10LTQtdC70YzQvdC40LpcIjtcclxuICAgIHdlZWtkYXlbMl09XCLQktGC0L7RgNC90LjQulwiO1xyXG4gICAgd2Vla2RheVszXT1cItCh0YDQtdC00LBcIjtcclxuICAgIHdlZWtkYXlbNF09XCLQp9C10YLQstC10YDQs1wiO1xyXG4gICAgd2Vla2RheVs1XT1cItCf0Y/RgtC90LjRhtCwXCI7XHJcbiAgICB3ZWVrZGF5WzZdPVwi0KHRg9Cx0LHQvtGC0LBcIjtcclxuICAgIGRvY3VtZW50LndyaXRlKFwi0KHQtdCz0L7QtNC90Y8gXCIgKyB3ZWVrZGF5W215VGltZS5nZXREYXkoKV0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgbGV0IG15UHJvZmlsZSA9IG5ldyBQcm9maWxlKCk7XHJcblxyXG4gICAgIGxldCBteUpvdXJuYWwgPSBuZXcgSm91cm5hbCgpO1xyXG5cclxuXHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGRyYXdQcm9maWxlKCkge1xyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZFByb2ZpbGVOZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNlbnRlclBhcnRcIik7XHJcblxyXG4gICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpZWxkUHJvZmlsZVwiKSkge2ZpZWxkUHJvZmlsZU5ldy5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgOyByZXR1cm47fVxyXG5cclxuICAgICAgICBsZXQgZmllbGRQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZmllbGRQcm9maWxlLmlkID0gYGZpZWxkUHJvZmlsZWA7XHJcblxyXG4gICAgICAgIGZpZWxkUHJvZmlsZU5ldy5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgZmllbGRQcm9maWxlTmV3LmFwcGVuZENoaWxkKGZpZWxkUHJvZmlsZSk7XHJcblxyXG5cclxuICAgICAgICBsZXQgcDFQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgcDFQcm9maWxlLnRleHRDb250ZW50ID1g0JjQvNGPYCArIGAgIGAgKyAgbXlQcm9maWxlLmRhdGEubmFtZTtcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDFQcm9maWxlKTtcclxuXHJcbiAgICAgICAgbGV0IHAyUHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHAyUHJvZmlsZS50ZXh0Q29udGVudCA9IGDQn9C+0LtgICsgYCAgYCtteVByb2ZpbGUuZGF0YS5nZW5kZXI7XHJcbiAgICAgICAgZmllbGRQcm9maWxlLmFwcGVuZENoaWxkKHAyUHJvZmlsZSk7XHJcblxyXG4gICAgICAgIGxldCBwM1Byb2ZpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBwM1Byb2ZpbGUudGV4dENvbnRlbnQgPSBg0JTQsNGC0LAg0YDQvtC20LTQtdC90LjRj2AgKyBgICBgICsgbXlQcm9maWxlLmRhdGEuZGF0ZU9mQmlydGg7XHJcbiAgICAgICAgZmllbGRQcm9maWxlLmFwcGVuZENoaWxkKHAzUHJvZmlsZSk7XHJcblxyXG5cclxuICAgICAgICBsZXQgcDRQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgcDRQcm9maWxlLnRleHRDb250ZW50ID0gYNCS0LXRgWAgKyBgICBgICsgbXlQcm9maWxlLmRhdGEuaGVpZ2h0O1xyXG4gICAgICAgIGZpZWxkUHJvZmlsZS5hcHBlbmRDaGlsZChwNFByb2ZpbGUpO1xyXG5cclxuICAgICAgICBsZXQgcDVQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgcDVQcm9maWxlLnRleHRDb250ZW50ID0gYNCg0L7RgdGCYCArIGAgIGAgKyBteVByb2ZpbGUuZGF0YS53ZWdodDtcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDVQcm9maWxlKTtcclxuXHJcbiAgICAgICAgbGV0IHA2UHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHA2UHJvZmlsZS50ZXh0Q29udGVudCA9IGDQntCx0YrQtdC8INCz0YDRg9C00LhgICsgYCAgYCArIG15UHJvZmlsZS5kYXRhLndhaXN0O1xyXG4gICAgICAgIGZpZWxkUHJvZmlsZS5hcHBlbmRDaGlsZChwNlByb2ZpbGUpO1xyXG5cclxuICAgICAgICBsZXQgcDdQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgcDdQcm9maWxlLnRleHRDb250ZW50ID0gYNCe0LHRitC10Lwg0YLQsNC70LjQuGAgKyBgICBgICsgbXlQcm9maWxlLmRhdGEuaGlwc2l6ZTtcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDdQcm9maWxlKTtcclxuXHJcbiAgICAgICAgbGV0IHA4UHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHA4UHJvZmlsZS50ZXh0Q29udGVudCA9IGDQntCx0YrQtdC8INCx0LXQtNC10YBgICsgYCAgYCArbXlQcm9maWxlLmRhdGEuYnJlYXN0U2l6ZTtcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDhQcm9maWxlKTtcclxuXHJcbiAgICAgICAgbGV0IHA5UHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHA5UHJvZmlsZS50ZXh0Q29udGVudCA9YNCh0YPRgtC+0YfQvdCw0Y8g0L3QvtGA0LzQsCBgICsgYCAgYCArIG15UHJvZmlsZS5kYXRhLmNhbG9yaWVzO1xyXG4gICAgICAgIGZpZWxkUHJvZmlsZS5hcHBlbmRDaGlsZChwOVByb2ZpbGUpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gbGV0IG15Sm91cm5hbCA9IG5ldyBKb3VybmFsKG15UHJvZmlsZSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxufSgpKTsiLCJgdXNlIHN0cmljdGA7XHJcblxyXG5pbXBvcnQgREFPIGZyb20gXCIuL0RBT1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZmlsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSB7XHJcbiAgICAgICAgICAgIGtleTogMSxcclxuICAgICAgICAgICAgbmFtZTogYGAsXHJcbiAgICAgICAgICAgIGdlbmRlcjogYGAsXHJcbiAgICAgICAgICAgIGRhdGVPZkJpcnRoOiBgYCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBgYCxcclxuICAgICAgICAgICAgd2VnaHQ6IGBgLFxyXG4gICAgICAgICAgICB3YWlzdDogYGAsXHJcbiAgICAgICAgICAgIGhpcHNpemU6IGBgLFxyXG4gICAgICAgICAgICBicmVhc3RTaXplOiBgYCxcclxuICAgICAgICAgICAgY2Fsb3JpZXM6IGBgXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLkRCY29uZmlnID0ge1xyXG4gICAgICAgICAgICBrZXk6IDEsXHJcbiAgICAgICAgICAgIHByb2ZpbGVEQk5hbWU6IGBwcm9maWxlREJgLFxyXG4gICAgICAgICAgICBwcm9maWxlU3RvcmVOYW1lOiBgcHJvZmlsZVN0b3JlYFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucHJvZmlsZURBTyA9IG5ldyBEQU8odGhpcy5EQmNvbmZpZy5wcm9maWxlREJOYW1lLCB0aGlzLkRCY29uZmlnLnByb2ZpbGVTdG9yZU5hbWUpO1xyXG5cclxuICAgICAgIC8vIHRoaXMuY3JlYXRlUHJvZmlsZSgpO1xyXG4gICAgICAgIHRoaXMucmVhZFByb2ZpbGUoKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgY3JlYXRlUHJvZmlsZSgpIHtcclxuXHJcblxyXG4gICAgfTtcclxuXHJcbiAgICByZWFkUHJvZmlsZSgpIHtcclxuXHJcbiAgICAgICAgLy9sZXQgREJjb25mID0gdGhpcy5EQmNvbmZpZztcclxuICAgICAgICBsZXQgZGFkYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIGxldCBEQU89dGhpcy5wcm9maWxlREFPO1xyXG5cclxuLy9yZWFkIGNsb3N1cmVcclxuICAgICAgICBsZXQgcmVhZCA9IGZ1bmN0aW9uIChkYnNlc3Npb24pIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKERBTy5zdG9yZU5hbWUpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCB0cmFuc2FjdGlvbiA9IGRic2Vzc2lvbi50cmFuc2FjdGlvbihbREFPLnN0b3JlTmFtZV0sIFwicmVhZG9ubHlcIik7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVhZFByb2ZpbGUgdHJhbnNhY3Rpb24gY29tcGxldGVcIik7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWFkUHJvZmlsZSB0cmFuc2FjdGlvbiBlcnJvclwiKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBvYmplY3RTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKERBTy5zdG9yZU5hbWUpO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBsZXQgb2JqZWN0U3RvcmVSZXF1ZXN0ID0gb2JqZWN0U3RvcmUuZ2V0KDEpO1xyXG5cclxuICAgICAgICAgICAgb2JqZWN0U3RvcmVSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVhZFByb2ZpbGUgb25zdWNjZXNzXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHRfZGF0YSA9IG9iamVjdFN0b3JlUmVxdWVzdC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICBkYWRhdGEgPSByZXN1bHRfZGF0YTtcclxuICAgICAgICAgICAgICAgLy8gdGhpcy5kYXRhPWRhZGF0YTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0X2RhdGEpO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICAvL3VwZ2RhcmUgY2xvc3VyZVxyXG4gICAgICAgIGxldCBvbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAvLyDQldGB0LvQuCDQkdCUINC10YnQtSDQvdC1INGB0YPRidC10YHRgtCy0YPQtdGCLCDRgtC+INGB0L7Qt9C00LDQtdC8INGF0YDQsNC90LjQu9C40YnQtSDQvtCx0YrQtdC60YLQvtCyLlxyXG4gICAgICAgICAgICBsZXQgc2VsZj0gdGhpczsgLy9yZXF1ZXN0XHJcbiAgICAgICAgICAgIGxldCBkYiA9IGUuY3VycmVudFRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKERBTy5zdG9yZU5hbWUsIHtrZXlQYXRoOiBcImtleVwifSk7XHJcbiAgICAgICAgICAgIC8vZmlsbFxyXG4gICAgICAgICAgICBsZXQgb2JqZWN0U3RvcmUgPSBzZWxmLnRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKERBTy5zdG9yZU5hbWUpO1xyXG4gICAgICAgICAgICBkYWRhdGEua2V5ID0gMTtcclxuICAgICAgICAgICAgZGFkYXRhLm5hbWUgPSBgVmVyb25pa2FgO1xyXG4gICAgICAgICAgICBkYWRhdGEuZ2VuZGVyID0gYNC20LXQvdGB0LrQuNC5YDtcclxuICAgICAgICAgICAgZGFkYXRhLmRhdGVPZkJpcnRoID0gYDI5LjA0LjE5ODFgO1xyXG4gICAgICAgICAgICBkYWRhdGEuaGVpZ2h0ID0gYDc1INC60LNgO1xyXG4gICAgICAgICAgICBkYWRhdGEud2VnaHQgPSBgMTY1INGB0LxgO1xyXG4gICAgICAgICAgICBkYWRhdGEud2Fpc3QgPSBgODAg0YHQvGA7XHJcbiAgICAgICAgICAgIGRhZGF0YS5oaXBzaXplID0gYDc1INGB0LxgO1xyXG4gICAgICAgICAgICBkYWRhdGEuYnJlYXN0U2l6ZSA9IGAxMDAg0YHQvGA7XHJcbiAgICAgICAgICAgIGRhZGF0YS5jYWxvcmllcyA9IGAxMTAwINC60LrQsNC7YDtcclxuXHJcbiAgICAgICAgICAgIGxldCBvYmplY3RTdG9yZVJlcXVlc3QgPSBvYmplY3RTdG9yZS5hZGQoZGFkYXRhKTtcclxuICAgICAgICAgICAgb2JqZWN0U3RvcmVSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVwb3J0IHRoZSBzdWNjZXNzIG9mIHRoZSByZXF1ZXN0ICh0aGlzIGRvZXMgbm90IG1lYW4gdGhlIGl0ZW1cclxuICAgICAgICAgICAgICAgIC8vIGhhcyBiZWVuIHN0b3JlZCBzdWNjZXNzZnVsbHkgaW4gdGhlIERCIC0gZm9yIHRoYXQgeW91IG5lZWQgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSlcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImRhZGF0YSBmaWxsIG9rXCIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIERBTy5jb25uZWN0KHJlYWQsb251cGdyYWRlbmVlZGVkKVxyXG5cclxuICAgIH07XHJcblxyXG5cclxuICAgIHVwZGF0ZVByb2ZpbGUoKSB7XHJcblxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgZGVsZXRlUHJvZmlsZSgpIHtcclxuXHJcbiAgICB9O1xyXG5cclxuXHJcbn1cclxuIiwiXHJcbiAgICBgdXNlIHN0cmljdGA7XHJcblxyXG4gICAgZXhwb3J0IGRlZmF1bHQgIGNsYXNzIEpvdXJuYWwgIHtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IgKHBhcmFtZXRyUHJvZmlsZSkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgam91cm5hbFJlY29yZHMgOiBbXSxcclxuICAgICAgICAgICAgICAgIHByb2ZpbGVJZDogMSxcclxuICAgICAgICAgICAgICAgIGxhc3RVcGRhdGVEYXRhOiB7fVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==