!function(e){var t={};function n(o){if(t[o])return t[o].exports;var l=t[o]={i:o,l:!1,exports:{}};return e[o].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class o{constructor(e,t){console.log("constructing:"+e+t),this.DBname=e,this.storeName=t,console.log("dao constructed"),console.log(this)}connect(e,t){let n=this;console.log(n);let o=indexedDB.open(n.DBname,1);o.onerror=function(e){console.log(e)},o.onsuccess=function(){let t=o.result;console.log("DAO"+typeof t),e(t,n)},o.onupgradeneeded=t}create(){}read(){}update(){}delete(){}}!function(){let e=document.getElementById("header"),t=document.createElement("input");t.id="b1",t.type="button",t.value="Профиль";let n=document.createElement("input");n.id="b2",n.type="button",n.value="Журнал",n.setAttribute("click","obj.HandleClick1();");let l=document.createElement("input");l.id="b3",l.type="button",l.value="Настройки",l.setAttribute("click","obj.HandleClick1();"),e.appendChild(t),e.appendChild(n),e.appendChild(l);let r=new class{constructor(){this.data={key:1,name:"",gender:"",dateOfBirth:"",height:"",weght:"",waist:"",hipsize:"",breastSize:"",calories:""},this.DBconfig={key:1,profileDBName:"profileDB",profileStoreName:"profileStore"},this.profileDAO=new o(this.DBconfig.profileDBName,this.DBconfig.profileStoreName),this.readProfile()}createProfile(){}readProfile(){let e=this.data,t=this.profileDAO;console.log("dao="),console.log(t),t.connect(function(n){console.log(t.storeName);let o=n.transaction([t.storeName],"readonly");o.oncomplete=function(e){console.log("readProfile transaction complete")},o.onerror=function(e){console.log("readProfile transaction error")};let l=o.objectStore(t.storeName);console.log(t.storeName);let r=l.get(1);r.onsuccess=function(t){console.log("readProfile onsuccess");let n=r.result;e=n,console.log(n)}},function(n){console.log(t.storeName),n.currentTarget.result.createObjectStore(t.storeName,{keyPath:"key"});let o=this.transaction.objectStore(t.storeName);e.key=1,e.name="Veronika",e.gender="женский",e.dateOfBirth="29.04.1981",e.height="75 кг",e.weght="165 см",e.waist="80 см",e.hipsize="75 см",e.breastSize="100 см",e.calories="1100 ккал",o.add(e).onsuccess=function(e){console.log("dadata fill ok")}})}updateProfile(){}deleteProfile(){}};new class{constructor(e){this.data={journalRecords:[],profileId:1,lastUpdateData:{}}}};document.getElementById("b1").addEventListener("click",function(){let e=document.getElementById("centerPart"),t=document.createElement("div");t.id="fieldProfile",e.innerHTML="",e.appendChild(t);let n=document.createElement("p");n.textContent="Имя  "+r.data.name,t.appendChild(n);let o=document.createElement("p");o.textContent="Пол  "+r.data.gender,t.appendChild(o);let l=document.createElement("p");l.textContent="Дата рождения  "+r.data.dateOfBirth,t.appendChild(l);let a=document.createElement("p");a.textContent="Вес  "+r.data.height,t.appendChild(a);let c=document.createElement("p");c.textContent="Рост  "+r.data.weght,t.appendChild(c);let i=document.createElement("p");i.textContent="Объем груди  "+r.data.waist,t.appendChild(i);let d=document.createElement("p");d.textContent="Объем талии  "+r.data.hipsize,t.appendChild(d);let s=document.createElement("p");s.textContent="Объем бедер  "+r.data.breastSize,t.appendChild(s);let u=document.createElement("p");u.textContent="Суточная норма   "+r.data.calories,t.appendChild(u)})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY2xhc3MvREFPLmpzIiwid2VicGFjazovLy8uL2ZkMi1wcm9qZWN0LmpzIiwid2VicGFjazovLy8uL2NsYXNzL1Byb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vY2xhc3MvSm91cm5hbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiREFPIiwiW29iamVjdCBPYmplY3RdIiwiREJuYW1lIiwic3RvcmVOYW1lIiwiY29uc29sZSIsImxvZyIsInRoaXMiLCJmIiwib251cGdyYWRlbmVlZGVkIiwic2VsZiIsInJlcXVlc3QiLCJpbmRleGVkREIiLCJvcGVuIiwib25lcnJvciIsImVyciIsIm9uc3VjY2VzcyIsImRic2Vzc2lvbiIsInJlc3VsdCIsImZpZWxkMSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJidG4xIiwiY3JlYXRlRWxlbWVudCIsImlkIiwidHlwZSIsImJ0bjIiLCJzZXRBdHRyaWJ1dGUiLCJidG4zIiwiYXBwZW5kQ2hpbGQiLCJteVByb2ZpbGUiLCJkYXRhIiwia2V5IiwiZ2VuZGVyIiwiZGF0ZU9mQmlydGgiLCJoZWlnaHQiLCJ3ZWdodCIsIndhaXN0IiwiaGlwc2l6ZSIsImJyZWFzdFNpemUiLCJjYWxvcmllcyIsIkRCY29uZmlnIiwicHJvZmlsZURCTmFtZSIsInByb2ZpbGVTdG9yZU5hbWUiLCJwcm9maWxlREFPIiwicmVhZFByb2ZpbGUiLCJkYWRhdGEiLCJjb25uZWN0IiwidHJhbnNhY3Rpb24iLCJvbmNvbXBsZXRlIiwiZXZlbnQiLCJvYmplY3RTdG9yZSIsIm9iamVjdFN0b3JlUmVxdWVzdCIsInJlc3VsdF9kYXRhIiwiZSIsImN1cnJlbnRUYXJnZXQiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJhZGQiLCJwYXJhbWV0clByb2ZpbGUiLCJqb3VybmFsUmVjb3JkcyIsInByb2ZpbGVJZCIsImxhc3RVcGRhdGVEYXRhIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZpZWxkUHJvZmlsZU5ldyIsImZpZWxkUHJvZmlsZSIsImlubmVySFRNTCIsInAxUHJvZmlsZSIsInRleHRDb250ZW50IiwicDJQcm9maWxlIiwicDNQcm9maWxlIiwicDRQcm9maWxlIiwicDVQcm9maWxlIiwicDZQcm9maWxlIiwicDdQcm9maWxlIiwicDhQcm9maWxlIiwicDlQcm9maWxlIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtBTUFaLEVBQUFtQixFQUFBLFNBQUFqQixHQUNBWSxPQUFBQyxlQUFBYixFQUFBLGNBQWlEa0IsT0FBQSxLQUlqRHBCLEVBQUFxQixFQUFBLFNBQUFsQixHQUNB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TUFDQTZCLEVBQUFwQyxZQUFBMkMsR0FFQSxJQUFBQyxFQUFBckQsU0FBQUcsY0FBQSxLQUNBa0QsRUFBQUwsWUFBQSxnQkFBQXRDLEVBQUFDLEtBQUFNLE1BQ0E0QixFQUFBcEMsWUFBQTRDLEdBRUEsSUFBQUMsRUFBQXRELFNBQUFHLGNBQUEsS0FDQW1ELEVBQUFOLFlBQUEsZ0JBQUF0QyxFQUFBQyxLQUFBTyxRQUNBMkIsRUFBQXBDLFlBQUE2QyxHQUVBLElBQUFDLEVBQUF2RCxTQUFBRyxjQUFBLEtBQ0FvRCxFQUFBUCxZQUFBLGdCQUFBdEMsRUFBQUMsS0FBQVEsV0FDQTBCLEVBQUFwQyxZQUFBOEMsR0FFQSxJQUFBQyxFQUFBeEQsU0FBQUcsY0FBQSxLQUNBcUQsRUFBQVIsWUFBQSxvQkFBQXRDLEVBQUFDLEtBQUFTLFNBQ0F5QixFQUFBcEMsWUFBQStDLEtBbkdBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJgdXNlIHN0cmljdGA7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgREFPIHtcclxuICAgIGNvbnN0cnVjdG9yIChEQm5hbWUsIHN0b3JlTmFtZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29uc3RydWN0aW5nOlwiK0RCbmFtZSArc3RvcmVOYW1lIClcclxuICAgICAgICB0aGlzLkRCbmFtZSA9IERCbmFtZTtcclxuICAgICAgICB0aGlzLnN0b3JlTmFtZSA9IHN0b3JlTmFtZTtcclxuICAgICAgICBjb25zb2xlLmxvZyAoXCJkYW8gY29uc3RydWN0ZWRcIilcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgY29ubmVjdCAoZixvbnVwZ3JhZGVuZWVkZWQpIHtcclxuICAgICAgICBsZXQgc2VsZj10aGlzO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGYpXHJcbiAgICAgICAgbGV0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihzZWxmLkRCbmFtZSwgMSk7IC8vdmVyIDFcclxuICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGRic2Vzc2lvbiA9IHJlcXVlc3QucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coYERBT2AgKyB0eXBlb2YgZGJzZXNzaW9uKTtcclxuICAgICAgICAgICAgZihkYnNlc3Npb24sc2VsZik7XHJcblxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gb251cGdyYWRlbmVlZGVkO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlICgpIHt9XHJcbiAgICByZWFkICgpIHt9XHJcbiAgICB1cGRhdGUgKCkge31cclxuICAgIGRlbGV0ZSAoKSB7fVxyXG59IiwiXHJcblxyXG5pbXBvcnQgUHJvZmlsZSBmcm9tIFwiLi9jbGFzcy9Qcm9maWxlXCI7XHJcblxyXG5cclxuaW1wb3J0IEpvdXJuYWwgZnJvbSBcIi4vY2xhc3MvSm91cm5hbFwiO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBgdXNlIHN0cmljdGA7XHJcblxyXG5cclxuICAgIGxldCBmaWVsZDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlYWRlclwiKTtcclxuXHJcbiAgICBsZXQgYnRuMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGJ0bjEuaWQgPSAnYjEnO1xyXG4gICAgYnRuMS50eXBlID0gJ2J1dHRvbic7XHJcbiAgICBidG4xLnZhbHVlID0gJ9Cf0YDQvtGE0LjQu9GMJztcclxuICAgIC8vLy9idG4xLnNldEF0dHJpYnV0ZSgnY2xpY2snLCAnb2JqLkhhbmRsZUNsaWNrMSgpOycpO1xyXG5cclxuXHJcbiAgICBsZXQgYnRuMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGJ0bjIuaWQgPSAnYjInO1xyXG4gICAgYnRuMi50eXBlID0gJ2J1dHRvbic7XHJcbiAgICBidG4yLnZhbHVlID0gJ9CW0YPRgNC90LDQuyc7XHJcbiAgICBidG4yLnNldEF0dHJpYnV0ZSgnY2xpY2snLCAnb2JqLkhhbmRsZUNsaWNrMSgpOycpO1xyXG5cclxuXHJcbiAgICBsZXQgYnRuMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGJ0bjMuaWQgPSAnYjMnO1xyXG4gICAgYnRuMy50eXBlID0gJ2J1dHRvbic7XHJcbiAgICBidG4zLnZhbHVlID0gJ9Cd0LDRgdGC0YDQvtC50LrQuCc7XHJcbiAgICBidG4zLnNldEF0dHJpYnV0ZSgnY2xpY2snLCAnb2JqLkhhbmRsZUNsaWNrMSgpOycpO1xyXG5cclxuXHJcbiAgICBmaWVsZDEuYXBwZW5kQ2hpbGQoYnRuMSk7XHJcblxyXG4gICAgZmllbGQxLmFwcGVuZENoaWxkKGJ0bjIpO1xyXG5cclxuICAgIGZpZWxkMS5hcHBlbmRDaGlsZChidG4zKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIGxldCBteVByb2ZpbGUgPSBuZXcgUHJvZmlsZSgpO1xyXG5cclxuICAgICBsZXQgbXlKb3VybmFsID0gbmV3IEpvdXJuYWwoKTtcclxuXHJcblxyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYjFcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRyYXdQcm9maWxlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBkcmF3UHJvZmlsZSgpIHtcclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZFByb2ZpbGVOZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNlbnRlclBhcnRcIik7XHJcblxyXG5cclxuXHJcbiAgICAgICAgbGV0IGZpZWxkUHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGZpZWxkUHJvZmlsZS5pZCA9IGBmaWVsZFByb2ZpbGVgO1xyXG5cclxuXHJcbiAgICAgICAgZmllbGRQcm9maWxlTmV3LmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgICAgICBmaWVsZFByb2ZpbGVOZXcuYXBwZW5kQ2hpbGQoZmllbGRQcm9maWxlKTtcclxuXHJcblxyXG5cclxuICAgICAgICBsZXQgcDFQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgcDFQcm9maWxlLnRleHRDb250ZW50ID1g0JjQvNGPYCArIGAgIGAgKyAgbXlQcm9maWxlLmRhdGEubmFtZTtcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDFQcm9maWxlKTtcclxuXHJcblxyXG4gICAgICAgIGxldCBwMlByb2ZpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBwMlByb2ZpbGUudGV4dENvbnRlbnQgPSBg0J/QvtC7YCArIGAgIGArbXlQcm9maWxlLmRhdGEuZ2VuZGVyO1xyXG4gICAgICAgIGZpZWxkUHJvZmlsZS5hcHBlbmRDaGlsZChwMlByb2ZpbGUpO1xyXG5cclxuICAgICAgICBsZXQgcDNQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgcDNQcm9maWxlLnRleHRDb250ZW50ID0gYNCU0LDRgtCwINGA0L7QttC00LXQvdC40Y9gICsgYCAgYCArIG15UHJvZmlsZS5kYXRhLmRhdGVPZkJpcnRoO1xyXG4gICAgICAgIGZpZWxkUHJvZmlsZS5hcHBlbmRDaGlsZChwM1Byb2ZpbGUpO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IHA0UHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHA0UHJvZmlsZS50ZXh0Q29udGVudCA9IGDQktC10YFgICsgYCAgYCArIG15UHJvZmlsZS5kYXRhLmhlaWdodDtcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDRQcm9maWxlKTtcclxuXHJcbiAgICAgICAgbGV0IHA1UHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHA1UHJvZmlsZS50ZXh0Q29udGVudCA9IGDQoNC+0YHRgmAgKyBgICBgICsgbXlQcm9maWxlLmRhdGEud2VnaHQ7XHJcbiAgICAgICAgZmllbGRQcm9maWxlLmFwcGVuZENoaWxkKHA1UHJvZmlsZSk7XHJcblxyXG4gICAgICAgIGxldCBwNlByb2ZpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBwNlByb2ZpbGUudGV4dENvbnRlbnQgPSBg0J7QsdGK0LXQvCDQs9GA0YPQtNC4YCArIGAgIGAgKyBteVByb2ZpbGUuZGF0YS53YWlzdDtcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDZQcm9maWxlKTtcclxuXHJcbiAgICAgICAgbGV0IHA3UHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHA3UHJvZmlsZS50ZXh0Q29udGVudCA9IGDQntCx0YrQtdC8INGC0LDQu9C40LhgICsgYCAgYCArIG15UHJvZmlsZS5kYXRhLmhpcHNpemU7XHJcbiAgICAgICAgZmllbGRQcm9maWxlLmFwcGVuZENoaWxkKHA3UHJvZmlsZSk7XHJcblxyXG4gICAgICAgIGxldCBwOFByb2ZpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBwOFByb2ZpbGUudGV4dENvbnRlbnQgPSBg0J7QsdGK0LXQvCDQsdC10LTQtdGAYCArIGAgIGAgK215UHJvZmlsZS5kYXRhLmJyZWFzdFNpemU7XHJcbiAgICAgICAgZmllbGRQcm9maWxlLmFwcGVuZENoaWxkKHA4UHJvZmlsZSk7XHJcblxyXG4gICAgICAgIGxldCBwOVByb2ZpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBwOVByb2ZpbGUudGV4dENvbnRlbnQgPWDQodGD0YLQvtGH0L3QsNGPINC90L7RgNC80LAgYCArIGAgIGAgKyBteVByb2ZpbGUuZGF0YS5jYWxvcmllcztcclxuICAgICAgICBmaWVsZFByb2ZpbGUuYXBwZW5kQ2hpbGQocDlQcm9maWxlKTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gbGV0IG15Sm91cm5hbCA9IG5ldyBKb3VybmFsKG15UHJvZmlsZSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxufSgpKTsiLCJgdXNlIHN0cmljdGA7XHJcblxyXG5pbXBvcnQgREFPIGZyb20gXCIuL0RBT1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZmlsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSB7XHJcbiAgICAgICAgICAgIGtleTogMSxcclxuICAgICAgICAgICAgbmFtZTogYGAsXHJcbiAgICAgICAgICAgIGdlbmRlcjogYGAsXHJcbiAgICAgICAgICAgIGRhdGVPZkJpcnRoOiBgYCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBgYCxcclxuICAgICAgICAgICAgd2VnaHQ6IGBgLFxyXG4gICAgICAgICAgICB3YWlzdDogYGAsXHJcbiAgICAgICAgICAgIGhpcHNpemU6IGBgLFxyXG4gICAgICAgICAgICBicmVhc3RTaXplOiBgYCxcclxuICAgICAgICAgICAgY2Fsb3JpZXM6IGBgXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLkRCY29uZmlnID0ge1xyXG4gICAgICAgICAgICBrZXk6IDEsXHJcbiAgICAgICAgICAgIHByb2ZpbGVEQk5hbWU6IGBwcm9maWxlREJgLFxyXG4gICAgICAgICAgICBwcm9maWxlU3RvcmVOYW1lOiBgcHJvZmlsZVN0b3JlYFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucHJvZmlsZURBTyA9IG5ldyBEQU8odGhpcy5EQmNvbmZpZy5wcm9maWxlREJOYW1lLCB0aGlzLkRCY29uZmlnLnByb2ZpbGVTdG9yZU5hbWUpO1xyXG5cclxuICAgICAgIC8vIHRoaXMuY3JlYXRlUHJvZmlsZSgpO1xyXG4gICAgICAgIHRoaXMucmVhZFByb2ZpbGUoKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgY3JlYXRlUHJvZmlsZSgpIHtcclxuXHJcblxyXG4gICAgfTtcclxuXHJcbiAgICByZWFkUHJvZmlsZSgpIHtcclxuXHJcbiAgICAgICAgLy9sZXQgREJjb25mID0gdGhpcy5EQmNvbmZpZztcclxuICAgICAgICBsZXQgZGFkYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIGxldCBEQU89dGhpcy5wcm9maWxlREFPO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGFvPVwiKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKERBTylcclxuXHJcbiAgICAgICAgIC8vdXBnZGFyZSBjbG9zdXJlXHJcbiAgICAgICAgbGV0IG9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIC8vINCV0YHQu9C4INCR0JQg0LXRidC1INC90LUg0YHRg9GJ0LXRgdGC0LLRg9C10YIsINGC0L4g0YHQvtC30LTQsNC10Lwg0YXRgNCw0L3QuNC70LjRidC1INC+0LHRitC10LrRgtC+0LIuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKERBTy5zdG9yZU5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgc2VsZj0gdGhpczsgLy9yZXF1ZXN0XHJcbiAgICAgICAgICAgIGxldCBkYiA9IGUuY3VycmVudFRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKERBTy5zdG9yZU5hbWUsIHtrZXlQYXRoOiBcImtleVwifSk7XHJcbiAgICAgICAgICAgIC8vZmlsbFxyXG4gICAgICAgICAgICBsZXQgb2JqZWN0U3RvcmUgPSBzZWxmLnRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKERBTy5zdG9yZU5hbWUpO1xyXG4gICAgICAgICAgICBkYWRhdGEua2V5ID0gMTtcclxuICAgICAgICAgICAgZGFkYXRhLm5hbWUgPSBgVmVyb25pa2FgO1xyXG4gICAgICAgICAgICBkYWRhdGEuZ2VuZGVyID0gYNC20LXQvdGB0LrQuNC5YDtcclxuICAgICAgICAgICAgZGFkYXRhLmRhdGVPZkJpcnRoID0gYDI5LjA0LjE5ODFgO1xyXG4gICAgICAgICAgICBkYWRhdGEuaGVpZ2h0ID0gYDc1INC60LNgO1xyXG4gICAgICAgICAgICBkYWRhdGEud2VnaHQgPSBgMTY1INGB0LxgO1xyXG4gICAgICAgICAgICBkYWRhdGEud2Fpc3QgPSBgODAg0YHQvGA7XHJcbiAgICAgICAgICAgIGRhZGF0YS5oaXBzaXplID0gYDc1INGB0LxgO1xyXG4gICAgICAgICAgICBkYWRhdGEuYnJlYXN0U2l6ZSA9IGAxMDAg0YHQvGA7XHJcbiAgICAgICAgICAgIGRhZGF0YS5jYWxvcmllcyA9IGAxMTAwINC60LrQsNC7YDtcclxuXHJcbiAgICAgICAgICAgIGxldCBvYmplY3RTdG9yZVJlcXVlc3QgPSBvYmplY3RTdG9yZS5hZGQoZGFkYXRhKTtcclxuICAgICAgICAgICAgb2JqZWN0U3RvcmVSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVwb3J0IHRoZSBzdWNjZXNzIG9mIHRoZSByZXF1ZXN0ICh0aGlzIGRvZXMgbm90IG1lYW4gdGhlIGl0ZW1cclxuICAgICAgICAgICAgICAgIC8vIGhhcyBiZWVuIHN0b3JlZCBzdWNjZXNzZnVsbHkgaW4gdGhlIERCIC0gZm9yIHRoYXQgeW91IG5lZWQgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSlcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImRhZGF0YSBmaWxsIG9rXCIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgfTtcclxuLy9yZWFkIGNsb3N1cmVcclxuICAgICAgICBsZXQgcmVhZCA9IGZ1bmN0aW9uIChkYnNlc3Npb24pIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKERBTy5zdG9yZU5hbWUpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCB0cmFuc2FjdGlvbiA9IGRic2Vzc2lvbi50cmFuc2FjdGlvbihbREFPLnN0b3JlTmFtZV0sIFwicmVhZG9ubHlcIik7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVhZFByb2ZpbGUgdHJhbnNhY3Rpb24gY29tcGxldGVcIik7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWFkUHJvZmlsZSB0cmFuc2FjdGlvbiBlcnJvclwiKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBvYmplY3RTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKERBTy5zdG9yZU5hbWUpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhEQU8uc3RvcmVOYW1lKTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgbGV0IG9iamVjdFN0b3JlUmVxdWVzdCA9IG9iamVjdFN0b3JlLmdldCgxKTtcclxuXHJcbiAgICAgICAgICAgIG9iamVjdFN0b3JlUmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlYWRQcm9maWxlIG9uc3VjY2Vzc1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0X2RhdGEgPSBvYmplY3RTdG9yZVJlcXVlc3QucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgZGFkYXRhID0gcmVzdWx0X2RhdGE7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdF9kYXRhKTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgREFPLmNvbm5lY3QocmVhZCxvbnVwZ3JhZGVuZWVkZWQpXHJcblxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdXBkYXRlUHJvZmlsZSgpIHtcclxuXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBkZWxldGVQcm9maWxlKCkge1xyXG5cclxuICAgIH07XHJcblxyXG5cclxufVxyXG4iLCJcclxuICAgIGB1c2Ugc3RyaWN0YDtcclxuXHJcbiAgICBleHBvcnQgZGVmYXVsdCAgY2xhc3MgSm91cm5hbCAge1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvciAocGFyYW1ldHJQcm9maWxlKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBqb3VybmFsUmVjb3JkcyA6IFtdLFxyXG4gICAgICAgICAgICAgICAgcHJvZmlsZUlkOiAxLFxyXG4gICAgICAgICAgICAgICAgbGFzdFVwZGF0ZURhdGE6IHt9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9